{"/home/travis/build/npmtest/node-npmtest-wscraper/test.js":"/* istanbul instrument in package npmtest_wscraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wscraper/lib.npmtest_wscraper.js":"/* istanbul instrument in package npmtest_wscraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wscraper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wscraper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wscraper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wscraper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wscraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wscraper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wscraper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wscraper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wscraper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wscraper.__dirname + '/lib.npmtest_wscraper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wscraper/node_modules/wscraper/lib/wscraper.js":"/*\n * wscraper.js: a web scraper agent based on cheerio.js a fast, flexible, and lean implementation of core jQuery;\n * built on top of request.js;\n * inspired by http-agent.js;\n *\n * (C) 2012 Kalise\n * MIT LICENSE\n *\n */\n\nvar\tfs = require('fs'),\n\tutil = require('util'),\n\tEventEmitter = require(\"events\").EventEmitter,\n\tvm = require('vm'),\n\trequest = require('request'),\n\tcheerio = require('cheerio'),\n\tIconv  = require('iconv').Iconv;\n\nexports.createAgent = function () {\n\t return new WebScraper();\n};\n\nvar WebScraper = function () {\n\tEventEmitter.call(this);\n\tthis.host = '';\t\n\tthis.paths = [];\n\tthis.script = '';\n\tthis.sandbox = {\n\t\t$: '', // $ -> is the DOM document to be parsed\n\t\tresult: {} // result -> is the JSON object containing the result of parsing\n\t};\t\n\tthis.running = false;\n\tthis.unvisited = []; \t\n\tthis.options = {\n\t\turi: '',\n\t\tmethod: 'GET',\n\t\theaders: { 'accept-charset':'UTF-8', 'accept':'text/html' },\n\t\tencoding: null\n\t};\n};\n\nutil.inherits(WebScraper, EventEmitter);\n\nWebScraper.prototype.start = function(host, paths, script) {\n\tif (!this.running) {\n\t    this.running = true;\n\t\tthis.host = host || 'localhost';\n\t\tif ((paths instanceof Array) && paths.length) {\n\t\t\tthis.paths = paths\t\t\n\t\t};\n\t\tif (typeof paths === 'string') {\n\t\t\tthis.paths[0] = paths\n\t\t};\n\t\tthis.script = script || '';\n\t\t// in javascript, assigning an array or an object to a variable makes a reference to the value,\n\t\t// so we are using the slice(0) function to make a copy of the array.\n\t\tthis.unvisited = this.paths.slice(0);\t\n\t    this.emit('start', this.paths.length);\n\t    this.next();\n\t}\n\telse util.log('[wscraper.j] agent is still running, use agent.stop() before to start it again');\n};\n\nWebScraper.prototype.stop = function() {\n\tif (this.running) {\n\t    this.running = false;\n\t    this.emit('stop', this.unvisited.length);\n\t}\n\telse util.log('[wscraper.j] agent is not running, use agent.start() before to stop it');\n};\n\nWebScraper.prototype.next = function() {\n\tif (this.running) {\t\t\n\t\tif (this.unvisited.length > 0) {\n\t\t\tvar path = this.unvisited.shift();\n\t\t\tvar url = '';\n\t\t\tif (path.indexOf('/') == 0) {\n\t\t\t\turl = 'http://' + this.host + path;\n\t\t\t} else {\n\t\t\t\turl = 'http://' + this.host + '/' + path;\n\t\t\t};\t\t\t\n\t\t\tutil.log('[wscraper.js] sending a request to: ' + url);\n\t\t\tthis.options.uri = url;\n\t\t\tvar self = this;\n\t\t\trequest(self.options, function (error, response, body) {\n\t\t\t\t// currently only 200 Ok code is expected as valid for web scraping\n\t\t\t\t// TODO: handle 3XX (redirections) status codes\n\t\t\t\tif (error || response.statusCode !=200) {\n\t\t\t\t\tself.emit('abort', 'error or bad response from ' + url);\n\t\t\t\t\treturn\n\t\t\t\t};\n\t\t\t\tvar data = body || {};\n\t\t\t\t// check the enconding header in the response.headers['content-type'] in order to understand the encoding used by the server\n\t\t\t\t// TODO: support all conversions supported by iconv.js\n\t\t\t\tvar encoding = 'UTF-8';\n\t\t\t\tif (response.headers['content-type'].match('charset=ISO-8859-1')) {\n\t\t\t\t\tencoding = 'ISO-8859-1';\n\t\t\t\t};\n\t\t\t\tif (encoding != 'UTF-8') { // convert data stream from ISO-8859-1 to UTF-8 encoding\n\t\t\t\t\tvar iconv = new Iconv(encoding, 'UTF-8');\n\t\t\t\t\tdata = iconv.convert(body);\n\t\t\t\t}\n\t\t\t\t// load the data in the sandbox\n\t\t\t\tself.sandbox.$ = cheerio.load(data.toString());\n\t\t\t\ttry {\n\t\t\t\t\t// run the script in the sandbox\n\t\t\t\t\tvm.runInNewContext(self.script, self.sandbox);\n\t\t\t\t} catch (e) {\n\t\t\t\t    self.emit('abort', e); // catch any error from the script\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (self.sandbox.result) {\n\t\t\t\t\tself.emit('done', url, self.sandbox.result)\n\t\t\t\t} else {\n\t\t\t\t\tself.emit('abort', 'parsing script is returning null value!')\n\t\t\t\t};\n\t\t\t})\t\n\t\t}\n\t\telse {\n\t\t\tthis.stop();\n\t\t}\n\t}\n\telse util.log('[wscraper.j] agent is not running, start it by calling agent.start()');\n};\n\n// use of the Scraper object without make any http request\nexports.createScraper = function () {\n\t return new Scraper();\n};\n\t\nvar Scraper = function () {\n\tEventEmitter.call(this);\n\tthis.html = '';\n\tthis.script = '';\n\tthis.sandbox = {\n\t\t$: '', // $ -> is the DOM document to be parsed\n\t\tresult: {} // result -> is the JSON object containing the result of parsing\n\t};\t\n};\n\nutil.inherits(Scraper, EventEmitter);\n\nScraper.prototype.run = function (html, script) {\n\tthis.html = html || '';\n\tthis.script = script || '';\n\tthis.emit('run');\n    this.sandbox.$ = cheerio.load(this.html);\n\t// run the loaded script in a sandbox\n\ttry {\n\t\tvm.runInNewContext(this.script.toString(), this.sandbox);\n\t\t// emit the \"done\" event and pass the result to the callback function\n\t} catch (e) {\n\t    this.emit('abort', e);\n\t\treturn;\n\t}\n\tif (this.sandbox.result) {\n\t\tthis.emit('done', this.sandbox.result)\n\t} else {\n\t\tthis.emit('abort', 'parsing script is returning null value!')\n\t};\t\n}\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-wscraper/node_modules/wscraper/scripts/googlefinance.js":"/* the script runs in a sandbox\n$ -> is the DOM document to be parsed\nresult -> is the JSON object containing the result of parsing\n*/\n\n/* at time of writing, google.com/finance reports financial data of public companies in the following html;\nwe scrape the current values (USD) of the company stocks and return it\n\n<div id=\"price-panel\" class=\"id-price-panel goog-inline-block\">\n<div>\n<span class=\"pr\">\n\t<span id=\"ref_22144_l\">656.06</span>\n</span>\n<div class=\"id-price-change nwp goog-inline-block\">\n<span class=\"ch bld\"><span class=\"chr\" id=\"ref_22144_c\">-9.09</span>\n<span class=\"chr\" id=\"ref_22144_cp\">(-1.37%)</span>\n</span>\n</div>\n</div>\n<div>After Hours:&nbsp;<span class=\"bld\" id=\"ref_22144_el\">656.71</span>\n<span id=\"ref_22144_ec\" class=\"chg\">+0.65</span>\n<span id=\"ref_22144_ecp\" class=\"chg\">(0.10%)</span>\n<div id=\"ref_22144_elt\">Aug 21, 5:53PM EDT&nbsp;&nbsp;<div class=\"mdata-dis\">\n<span class=\"dis-large\"><nobr>NASDAQ\nreal-time data -\n<a href=\"http://www.google.com/help/stock_disclaimer.html#realtime\" class=\"dis-large\">Disclaimer</a>\n</nobr></span>\n<div>Currency in USD</div>\n</div>\n</div>\n</div>\n</div>\n\n*/\nresult = {};\nprice = $('div.id-price-panel').find('span.pr').children().text();\nresult.price = price || '';","/home/travis/build/npmtest/node-npmtest-wscraper/node_modules/wscraper/scripts/googlenews.js":"/* the script runs in a sandbox\n$ -> is the DOM document to be parsed\nresult -> is the JSON object containing the result of parsing\n*/\n\n/* at time of writing, google.com/news reports news title like in the following html;\n   we scrape all occurrency of news titles and return them as an Array\n \n<h2 class=\"esc-lead-article-title\">\n\t<a target=\"_blank\" class=\"article\">\n\t\t<span class=\"titletext\">What you can buy for the price of 1 Apple share</span>\n\t</a>\n</h2>\n*/\n\nresult = {};\nvar titles = $('h2.esc-lead-article-title').toArray(); \n$.each(titles, function(index, elem) {\n\t\t\tresult[index] = $(elem).children().children().text();\n});","/home/travis/build/npmtest/node-npmtest-wscraper/node_modules/wscraper/scripts/replace.js":"/* the script runs in a sandbox\n$ -> is the DOM document to be parsed\nresult -> is the JSON object containing the result of parsing\n*/\n\n/* Given the following HTML code\n<html>\n<head>\n<title>local scraping</title>\t\n</head>\n<body>\n<p class=\"Paragrafo\"> Lorem ipsum <span> dolor sit </span> amet </p>\n<p class=\"Paragrafo\"><span class=\"Immagine\"><img class=\"frame-1\" src=\"/image/fig1.jpeg\" alt=\"fig1.tif\"/></span></p>\n<p class=\"Paragrafo\"> Lorem ipsum dolor sit amet </p>\n<p class=\"Paragrafo\"><span class=\"ImmagineCentrata\"><img class=\"frame-2\" src=\"/image/fig2.jpeg\" alt=\"fig2.tif\"/></span></p>\n</body>\n</html>\n*/\n\nresult = {};\nvar imgs = $('img').toArray();\n$.each(imgs, function(index, elem) {\n\t\t\tvar cls = $(elem).parent().attr('class');\n\t\t\tvar source = $(elem).attr('src');\n\t\t\tvar div = $('<div class = \"' + cls + '\"><img src=\"' + source + '\"/></div>');\n\t\t\t$(elem).parent().parent().replaceWith(div)\n});\n\nresult.replaced = $.html() || '';\n\n/* we get this\n<html>\n<head>\n<title>local scraping</title>\t\n</head>\n<body>\n<p class=\"Paragrafo\"> Lorem ipsum <span> dolor sit </span> amet </p>\n<div class=\"Immagine\"><img src=\"/image/fig1.jpeg\"/></div>\n<p class=\"Paragrafo\"> Lorem ipsum dolor sit amet </p>\n<div class=\"ImmagineCentrata\"><img src=\"/image/fig2.jpeg\"/></div>\n</body>\n</html>\n*/\n"}